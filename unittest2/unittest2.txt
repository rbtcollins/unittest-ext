====================
 New *and* Improved
====================
----------------------------
 Coming changes to unittest
----------------------------

.. include:: <s5defs.txt>
.. footer:: Michael Foord 2010

| Michael Foord
| michael@voidspace.org.uk
| **www.voidspace.org.uk**

*If it isn't tested it doesn't work.* -- *If you write applications without tests then you are a bad person, incapable of love.*


.. contents:: New *and* improved: Coming changes to unittest
   :class: handout
   
   
Introduction
============

`unittest module <http://docs.python.org/library/unittest.html>`_ is the Python standard library testing framework. It is sometimes known as ``PyUnit`` and has a rich heritage as part of the `xUnit <http://en.wikipedia.org/wiki/XUnit>`_ family of testing libraries.

Until sometime after Python 2.6 was released ``unittest`` was stable to the point of rigor mortis, but several developers have been working on adding much needed features and some of the most successful concepts (like test discovery) from the other major Python test frameworks. These changes will arrive in Python 2.7 and 3.2 (although a *few* of them made it into Python 3.1).


New Assert Methods
==================

.. class:: handout

    The point of assertion methods in unittest is to provide useful messages on failure and to provide ready made methods for common assertions. Many of these were contributed by google or are in common use in other unittest extensions.
    
* ``assertGreater`` / ``assertLess`` / ``assertGreaterEqual`` / ``assertLessEqual``
* ``assertRegexpMatches(text, regext)`` - verifies that regexp search matches text
* ``assertIn(value, sequence)`` / ``assertNotIn`` - verifies the provided value is a member of the provided sequence
* ``assertIsNone`` / ``assertIsNotNone`` - assert a value is None
* ``assertIs(first, second)`` / ``assertIsNot`` - assert that first and second are the same object (identity)
* ``assertIsInstance`` / ``assertNotIsInstance``
* ``assertDictContainsSubset(subset, full)`` - Tests whether the key/value pairs in dictionary full are a superset of those in superset.
* ``assertSequenceEqual(actual, expected)`` - ignores type but checks members are the same
* ``assertSameElements(actual, expected)`` - ignores order and duplicates
  
  
Deprecations
============

``unittest`` used to have lots of ways of spelling the same methods. The duplicates have now been deprecated:

* ``assert_`` -> use ``assertTrue`` instead
* ``fail*`` -> use ``assert*`` instead
* ``assertEquals`` -> ``assertEqual`` is the one true way

New assertion methods *don't* have a ``fail...`` alias as well. If you preferred the ``fail*`` variant, tough luck.

.. class:: handout

    Not all the 'deprecated' methods issue a ``PendingDeprecationWarning`` when used. ``assertEquals`` and ``assert_`` are too widely used for official deprecations, but they're deprecated in the documentation.
    
    In the next version of the documentation the deprecated methods will be expunged and relegated to a 'deprecated methods' section.
    
    Methods that have deprecation warnings are: 
    
        failUnlessEqual, failIfEqual, failUnlessAlmostEqual, failIfAlmostEqual, failUnless, failUnlessRaises, failIf


Type Specific Equality
======================  

More useful failure messages when comparing specific types. Delegated to by ``assertEqual`` when you compare objects of the same (known) type:

* ``assertMultilineEqual``   - uses `difflib <http://docs.python.org/library/difflib.html>`_, default for comparing unicode strings
* ``assertSetEqual`` - default for comparing sets
* ``assertDictEqual``
* ``assertListEqual``
* ``assertTupleEqual``

Setup new default comparison functions with:

* ``addTypeEqualityFunc(type, function)``


assertRaises
============

As context manager::

    with self.assertRaises(TypeError):
        add(2, '3')

Testing the message with a regular expression:

    with self.assertRaisesRegexp(FooBarError, '^You shouldn't Foo a Bar$'):
        foo_the_bar()

Access to the exception object:

    with self.assertRaises(TypeError) as cm:
        do_something()
    
    exception = cm.exception
    self.assertEqual(exception.error_code, 3)

      
Command Line Behaviour
======================

::

    python -m unittest test_module1 test_module2
    python -m unittest test_module.TestClass
    python -m unittest test_module.TestClass.test_method

.. class:: handout

    The unittest module can be used from the command line to run tests from modules, classes or even individual test methods. In earlier versions it was only possible to run individual test methods and not modules or classes.
    
    If you are running tests for a whole test module and you define a ``load_tests`` function, then this function will be called to create the ``TestSuite`` for the module. This is the load_tests protocol.
    
    You can run tests with more detail (higher verbosity) by passing in the -v flag::

        python -m unittest -v test_module

    For a list of all the command line options::

        python -m unittest -h

New arguments to the ``main()`` function::

    main(exit=False, verbosity=2)
    
.. class:: handout 

    ``exit`` and ``verbosity`` parameters are new. By default ``main()`` calls ``sys.exit()`` when it has finished the test run. This is annoying if you are using it from the interactive interpreter. You can now switch that off and run tests with a higher than default verbosity (equivalent of the ``-v`` command line option).
    
    For use from the interactive interpreter you can do::
    
        >>> from unittest import main
        >>> main(module='test_module', exit=False)

    The command line can also be used for test discovery, for running all of the tests in a project or just a subset.


Test Discovery
==============

Test discovery has been missing from unittest for a long time, forcing everyone to write their own test discovery / collection system.

::

    python -m unittest discover


The ``discover`` sub-command has the following options:

   -v, --verbose    Verbose output
   -s directory     Directory to start discovery ('.' default)
   -p pattern       Pattern to match test files ('test*.py' default)
   -t directory     Top level directory of project (default to
                    start directory)

.. class:: handout

    
    The -s, -p, & -t options can be passsed in as positional arguments. The
    following two command lines are equivalent::

       python -m unittest discover -s project_directory -p '*_test.py'
       python -m unittest discover project_directory '*_test.py'


load_tests
==========

If a test module defines a ``load_tests`` function, that will be called to create the test suite for the module.

This example just uses one specific TestCase::

    def load_tests(loader, tests, pattern):
        suite = unittest.TestSuite()
        case = loader.loadTestsFromTestCase(TestCase)
        suite.addTests(case)
        return suite

.. class:: handout

    The ``tests`` argument is the standard tests that would be loaded from the module by default as a TestSuite. If you just want to add extra tests you can just call ``addTests`` on this. ``pattern`` is only used in the ``__init__.py`` of test packages when loaded from test discovery. This allows the ``load_tests`` function to continue (and customize) test discovery into the package. In standard test modules ``pattern`` will be None.


addCleanup
==========

Makes ``tearDown`` obsolete! Push clean-up functions onto a stack, at any point including in ``setUp``, ``tearDown`` or inside clean-up functions, and they are guaranteed to be run when the test ends (LIFO).

    def testMethod(self):
        temp_dir = tempfile.mkdtemp()
        self.addCleanup(shutil.rmtree, temp_dir)

.. class:: handout
    
    The full signature for addCleanup is: ``addCleanup(function, *args, **kwargs)``. Any additional args or keyword arguments will be passed into the cleanup function when it is called. It saves the need for nested ``try:..finally:`` blocks to undo actions performed by the test.
    
    If ``setUp()`` fails, meaning that ``tearDown()`` is not called, then any cleanup functions added will still be called.
    
    If you want to manually clear out the cleanup stack you can call ``doCleanups()``.
    
    Exceptions raises inside cleanup functions will cause the test to fail, but all cleanup functions will still run.


Test Skipping
=============

Decorators that work as class or method decorators for conditionally or unconditionally skipping tests::

    @skip("skip this test")
    def testMethod(self):
        ...
    
    @skipIf(sys.version_info[2] < 5, "only works on Python 2.5+")
    def testMethod(self):
        ...
        
    @skipUnless(sys.version_info[2] < 5, "only needed on Python < 2.5")
    def testMethod(self):
        ...

More Skipping
=============

::

    def testMethod(self):
        self.skip("skip, skippety skip")
    
    def testMethod(self):
        raise SkipException("whoops, time to skip")

    @expectedFailure
    def testThatFails(self):
        self.fail('this *should* fail')

.. class:: handout

    Ok, so ``expectedFailure`` isn't for skipping tests. You use it for test that are known to fail currently. If you fix the problem, so the test starts to pass, then it will be reported as an unexpected success. This will remind you to go back and remove the expectedFailure decorator. 

Minor Changes
=============

* Better messages with the ``longMessage`` class attribute
* ``TestResult``: ``startTestRun`` and ``stopTestRun`` 
* TextTestResult public and the TextTestRunner takes a runnerclass argument for providing a custom result class (you used to have to subclass TextTestRunner and override _makeResult)
* TextTestResult adds the test name to the test description even if you provide a docstring

The unittest2 Package
=====================

* The ``unittest2`` package (back-port to Python 2.4 of the changes)

The Future
==========

* ``classSetUp`` / ``classTearDown`` and ``moduleSetUp`` / ``moduleTearDown`` - shared fixtures
* Maybe Test Resources instead...
* `parameterized tests <http://bugs.python.org/issue7897>`_
* `test outcomes <http://rbtcollins.wordpress.com/2009/09/23/python-unittest-api-time-to-fix-it/>`_
