====================
 New *and* Improved
====================
----------------------------
 Coming changes to unittest
----------------------------

.. contents::

Introduction
============




he proposal is on the new features that have been added to the Python `unittest module <http://docs.python.org/library/unittest.html>`_ in recent months. ``unittest`` is the Python standard library testing framework. It is sometimes known as ``PyUnit`` and has a rich heritage as part of the `xUnit <http://en.wikipedia.org/wiki/XUnit>`_ family of testing libraries.

Until sometime after Python 2.6 was released ``unittest`` was stable to the point of rigor mortis, but several developers have been working on adding much needed features and some of the most successful concepts (like test discovery) from the other major Python test frameworks. These changes will arrive in Python 2.7 and 3.2 (although a *few* of them made it into Python 3.1).

Putting together the list of changes since Python 2.6 for the talk made me realise just how much has changed. Here's an overview of the most important changes from the talk description:


New Assert Methods
==================


* Brief introduction to ``unittest``, its past and its present
* New assert methods

  - ``assertGreater`` / ``assertLess`` etc
  - ``assertRegexpMatches``
  - ``assertIn`` / ``assertNotIn``
  - ``assertNone`` / ``assertNotNone``
  - ``assertIs`` / ``assertIsNot``
  - ``assertIsInstance`` / ``assertNotIsInstance``
  - ``assertSameElements``
  - ``assertDictContainsSubset``
  - Deprecated methods (``failIf`` / ``failUnless`` variants and ``assertEquals``)
  
Deprecations
============


Type Specific Equality
======================  

* New type specific equality functions

  - ``assertMultilineEqual``   - better string comparison
  - ``assertSetEqual``
  - ``assertDictEqual``
  - ``assertListEqual``
  - ``assertTupleEqual``
  - ``assertSequenceEqual``
  - ``addTypeEqualityFunc``


assertRaises
============
* New ``assertRaises`` behavior

  - Acts as a context manager
  - Keeps exception instance as context attribute
  - ``assertRaisesRegexp``

      
Command Line Behaviour
======================

* New command line behavior

  - New exit and verbosity parameters to main
  - ``python -m unittest foo``

The unittest module can be used from the command line to run tests from modules, classes or even individual test methods:

python -m unittest test_module1 test_module2
python -m unittest test_module.TestClass
python -m unittest test_module.TestClass.test_method

You can pass in a list with any combination of module names, and fully qualified class or method names.

You can run tests with more detail (higher verbosity) by passing in the -v flag:

python -m unittest -v test_module

For a list of all the command line options:

python -m unittest -h

Changed in version 2.7: In earlier versions it was only possible to run individual test methods and not modules or classes.

The command line can also be used for test discovery, for running all of the tests in a project or just a subset.

 
Test Discovery
==============

  - Test discovery (``python -m unittest discover``)
  - The ``load_tests`` protocol
  - The `discover <http://pypi.python.org/pypi/discover>`_ module

addCleanup
==========

Makes ``tearDown`` obsolete! Push clean-up functions onto a stack, at any point including in ``setUp``, ``tearDown`` or inside clean-up functions, and they are guaranteed to be run when the test ends. (FIFO)

* Better resource handling with ``addCleanup``

Test Skipping and Expected Failures
===================================

* Test skipping

Minor Changes
=============

* Better messages with the ``longMessage`` class attribute
* ``TestResult``: ``startTestRun`` and ``stopTestRun`` 

The unittest2 Package
=====================

* The ``unittest2`` package (back-port to Python 2.4 of the changes)

The Future
==========

* classSetUp / classTearDown and moduleSetUp / moduleTearDown - shared fixtures 
* parameterized tests
* test outcomes (`Robert Collins <http://rbtcollins.wordpress.com/2009/09/23/python-unittest-api-time-to-fix-it/>`_)
